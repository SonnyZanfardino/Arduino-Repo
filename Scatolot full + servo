/*
*/
/*
pin layout
0 tx
1 rx
2 servo1 signal
3 servo2 signal
4
5
6
7 left motor direction pin
8 right motor direction pin
9 left motor pwm pin
10 right motor pwm pin
11 HCSR04 trig
12 HCSR04 trig
13
A0
A1
A2
A3
A4
A5
The program requires that the RN42 bluetooth chip has the Tx pin linked to the 2 pin and the Rx pin linked to the 4 pin
*/
#include <Servo.h>
Servo servo1;
Servo servo2;
const int LEFT_MOTOR_DIR_PIN = 7;
const int LEFT_MOTOR_PWM_PIN = 9;
const int RIGHT_MOTOR_DIR_PIN = 8;
const int RIGHT_MOTOR_PWM_PIN = 10;
const int trigPin = 11;
const int echoPin =12;
boolean obstacle = false;
boolean outOfRange = false;
boolean randomDrive = false;
int reflex=210;
boolean ledOn = false; //debug boolean
boolean executing = false; //stops reading if the robot is moving to prevent long queues
void setup()
{
  delay(100);
  Serial.begin(115200); // The Bluetooth Mate defaults to 115200bps
  Serial.print("$"); // Print three times individually
  Serial.print("$");
  Serial.print("$"); // Enter command mode
  delay(400); // Short delay, wait for the Mate to send back CMD
  Serial.println("U,9600,N"); // Temporarily Change the baudrate to 9600, no parity
  digitalWrite(13,LOW);
  // 115200 can be too fast at times for NewSoftSerial to relay the data reliably
  Serial.begin(9600); // Start bluetooth serial at 9600
  Serial.print("---");
  digitalWrite(13,HIGH);
  delay(400); // Short delay, wait for the Mate to send back CMD
  digitalWrite(13,LOW);
  pinMode(7, OUTPUT); //Initiates left Motor dir pin
  pinMode(9, OUTPUT); //Initiates left Motor pwm pin
  pinMode(8, OUTPUT); //Initiates right Motor dir pin
  pinMode(10, OUTPUT); //Initiates right Motor pwm pin
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  servo1.attach(2);
  servo2.attach(3);
  servo1.write(0);
  delay(1000);
  servo2.write(0);
  delay(1000);
  servo1.write(180);
  servo2.write(180);
  
}  
void loop()
{
  long duration, distance;
  digitalWrite(trigPin, LOW);  // Added this line
  delayMicroseconds(2); // Added this line
  digitalWrite(trigPin, HIGH);
//  delayMicroseconds(1000); - Removed this line
  delayMicroseconds(10); // Added this line
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  distance = (duration/2) / 29.1;
  Serial.println(distance);
  obstacle = (distance>30)? false : true;
  outOfRange = (distance>200)? true : false;
  if(randomDrive){
    int randDir = random(5);
    int randTime = random(100,500);
    if(randDir == 0){
      steersx(randTime);
    }
    else if(randDir == 1){
      if(!obstacle){
        forward(randTime);
      }
    }
    else if(randDir == 2){
      backward(randTime);
    }
    else if(randDir == 3){
      steerdx(randTime);
    }
    else if(randDir == 4){
      delay(randTime);
    } 
  }
  
  if(Serial.available()){//bluetooth.available()
    // Send any characters the Serial monitor prints to the bluetooth
    //bluetooth.print("!");//(char)Serial.read()
    char msg = (char)Serial.read(); //read next character, and removes it from the queue
    char next = (char)Serial.peek(); //looks for next character, but doesn't eliminate it from the queue
    if(msg == next){
        Serial.read();
      }
      if(executing==false){
        if(msg=='d'){ //the characters have been choosen randomly
          Serial.println(msg);
          steerdx(reflex/2);
        }
        else if(msg=='a'){
          Serial.println(msg);
          steersx(reflex/2);
        }
        else if(msg=='w'){
          Serial.println(msg);
          if(!obstacle){
            forward(reflex);
          }
          
        }
        else if(msg=='s'){
          Serial.println(msg);
          backward(reflex);
      }
    }
  }
}
void forward(int time){
executing = true;
digitalWrite(LEFT_MOTOR_DIR_PIN, HIGH); //Establishes forward direction of Channel A
digitalWrite(RIGHT_MOTOR_DIR_PIN, HIGH); //Establishes forward direction of Channel B
analogWrite(LEFT_MOTOR_PWM_PIN,255);//pwmA
analogWrite(RIGHT_MOTOR_PWM_PIN,255);//pwmB
delay(time);
executing=false;
analogWrite(LEFT_MOTOR_PWM_PIN, 0); // Brake for Channel A
analogWrite(RIGHT_MOTOR_PWM_PIN, 0); // Brake for Channel B
}
void forward(int time, int intensity){
executing = true;
digitalWrite(LEFT_MOTOR_DIR_PIN, HIGH); //Establishes forward direction of Channel A
digitalWrite(RIGHT_MOTOR_DIR_PIN, HIGH); //Establishes forward direction of Channel B
analogWrite(LEFT_MOTOR_PWM_PIN, intensity);//pwmA
analogWrite(RIGHT_MOTOR_PWM_PIN,intensity);//pwmB
delay(time);
executing=false;
digitalWrite(LEFT_MOTOR_PWM_PIN, 0);
digitalWrite(RIGHT_MOTOR_PWM_PIN, 0);
}
void backward(int time){
executing = true;
digitalWrite(LEFT_MOTOR_DIR_PIN, LOW); //Establishes forward direction of Channel A
digitalWrite(RIGHT_MOTOR_DIR_PIN, LOW); //Establishes forward direction of Channel B
analogWrite(LEFT_MOTOR_PWM_PIN,255);//pwmA
analogWrite(RIGHT_MOTOR_PWM_PIN,255);//pwmB
delay(time);
executing=false;
analogWrite(LEFT_MOTOR_PWM_PIN, 0); // Brake for Channel A
analogWrite(RIGHT_MOTOR_PWM_PIN, 0); // Brake for Channel B
}
void backward(int time, int intensity){
executing = true;
digitalWrite(LEFT_MOTOR_DIR_PIN, LOW); //Establishes forward direction of Channel A
digitalWrite(RIGHT_MOTOR_DIR_PIN, LOW); //Establishes forward direction of Channel B
analogWrite(LEFT_MOTOR_PWM_PIN, intensity);//pwmA
analogWrite(RIGHT_MOTOR_PWM_PIN,intensity);//pwmB
delay(time);
executing=false;
digitalWrite(LEFT_MOTOR_PWM_PIN, 0);
digitalWrite(RIGHT_MOTOR_PWM_PIN, 0);
}
void steersx(int time){
executing = true;
digitalWrite(LEFT_MOTOR_DIR_PIN, LOW); //Establishes forward direction of Channel A
digitalWrite(RIGHT_MOTOR_DIR_PIN, HIGH); //Establishes forward direction of Channel B
analogWrite(LEFT_MOTOR_PWM_PIN, 128);//pwmA
analogWrite(RIGHT_MOTOR_PWM_PIN,128);//pwmB
delay(time);
executing=false;
digitalWrite(LEFT_MOTOR_PWM_PIN, 0);
digitalWrite(RIGHT_MOTOR_PWM_PIN, 0);
}
void steerdx(int time){
executing = true;
digitalWrite(LEFT_MOTOR_DIR_PIN, HIGH); //Establishes forward direction of Channel A
digitalWrite(RIGHT_MOTOR_DIR_PIN, LOW); //Establishes forward direction of Channel B
analogWrite(LEFT_MOTOR_PWM_PIN, 128);//pwmA
analogWrite(RIGHT_MOTOR_PWM_PIN,128);//pwmB
delay(time);
executing=false;
digitalWrite(LEFT_MOTOR_PWM_PIN, 0);
digitalWrite(RIGHT_MOTOR_PWM_PIN, 0);
} 
void moveServo1(int degree){
  servo1.write(degree);
}
void moveServo2(int degree){
  servo2.write(degree); 
}  

  /*******************************************************************************
  *
  * THIS SOFTWARE IS PROVIDED IN AN "AS IS" CONDITION. NO WARRANTY AND SUPPORT
  * IS APPLICABLE TO THIS SOFTWARE IN ANY FORM. CYTRON TECHNOLOGIES SHALL NOT,
  * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR CONSEQUENTIAL
  * DAMAGES, FOR ANY REASON WHATSOEVER.
  *
  ********************************************************************************
  *
  * SHIELD-MD10 EXAMPLE SOURCE CODE
  *
  *
  *
  * DESCRIPTION:
  *
  * This is an example to control the motor by using SHIELD-MD10.
  * The speed of the motor will ramp up from 0 to full speed,
  * and then ramp down back to 0 in both CW and CCW direction.
  *
  *
  *
  * AUTHOR : Kong Wai Weng
  * COMPANY : Cytron Technologies Sdn Bhd
  * REVISION : 1.0
  * DATE : 22/10/2012
  *
  //pin out
  /*
  0 tx
  1 rx
  2 pinpwm
  3 pinDir
  4 bluetooth tx
  5 bluetooth rx
  6 stepper 1 (brown)
  7 stepper 2 (red)
  8 stepper 3 (oragne)
  9 stepper 4 (yellow)
  10
  11
  12
  13
  A0
  A1
  A2
  A3
  A4
  A5
  */
  /*******************************************************************************/
  #include <SoftwareSerial.h>
  #include <Stepper.h>
  // change this to the number of steps on your motor
  #define STEPS 64
  
  /*******************************************************************************
  * IO DEFINITION *
  *******************************************************************************/
  // PWM is connected to pin 3.
  const int pinPwm = 3;
  // DIR is connected to pin 2.
  const int pinDir = 2;
  
  /*******************************************************************************
  * PRIVATE GLOBAL VARIABLES *
  *******************************************************************************/
  // Speed of the motor.
  static int iSpeed = 0;
  // Acceleration of the motor.
  static int iAcc = 1;
  
  /*******************************************************************************
  * STEPPER VARIABLES *
  *******************************************************************************/
  Stepper stepper(STEPS, 6, 8, 7, 9);
  
  /*******************************************************************************
  * BLUETOOTH VARIABLES *
  *******************************************************************************/
  int bluetoothTx = 4;
  int bluetoothRx = 5;
  SoftwareSerial bluetooth(bluetoothTx, bluetoothRx);
  
  /*******************************************************************************
  * FUNCTIONS *
  *******************************************************************************/
  // The setup routine runs once when you press reset.
  void setup() {
    // Initialize the PWM and DIR pins as digital outputs.
    pinMode(pinPwm, OUTPUT);
    pinMode(pinDir, OUTPUT);
    
    Serial.begin(9600);
    
    //Bluetooth setup
    bluetooth.begin(115200); // The Bluetooth Mate defaults to 115200bps
    bluetooth.print("$"); // Print three times individually
    bluetooth.print("$");
    bluetooth.print("$"); // Enter command mode
    delay(400); // Short delay, wait for the Mate to send back CMD
    bluetooth.println("U,9600,N"); // Temporarily Change the baudrate to 9600, no parity
    bluetooth.begin(9600); // Start bluetooth serial at 9600
    bluetooth.print("---");
    // set the speed of the motor to 100 RPMs
    stepper.setSpeed(100);
  }
  // The loop routine runs over and over again forever.
  
  void loop() {
    
    // SERIAL CONTROL
    if(Serial.available()){
      char msgSerial = (char)Serial.read(); //read next character, and removes it from the queue
      char nextSerial = (char)Serial.peek(); //looks for next character, but doesn't eliminate it from the queue
      if(msgSerial == nextSerial){
        Serial.read();
      }
      //Serial.println(msgSerial);
      if(msgSerial == 'a'){
        stepCW();
        Serial.println(msgSerial);
      }
      if(msgSerial == 'c'){
        stepACW();
        bluetooth.println(msgSerial);
      }
      if(msgSerial == 'd'){
        slideDX();
        Serial.println(msgSerial);
      }
      if(msgSerial == 's'){
        slideSX();
        Serial.println(msgSerial);
      }
    }
    
    // BLUETOOTH CONTROL
    if(bluetooth.available()){
      char msg = (char)bluetooth.read(); //read next character, and removes it from the queue
      char next = (char)bluetooth.peek(); //looks for next character, but doesn't eliminate it from the queue
      if(msg == next){
        bluetooth.read();
      }
      bluetooth.println(msg);
      if(msg == 'a'){
        stepCW();
        bluetooth.println(msg);
      }
      if(msg == 'c'){
        stepACW();
        bluetooth.println(msg);
      }
      if(msg == 'd'){
        slideDX();
        bluetooth.println(msg);
      }
      if(msg == 's'){
        slideSX();
        bluetooth.println(msg);
      }
    }
    delay(10);
  }
    
  void stepCW(){
    stepper.step(100);
  }
  
  void stepACW(){
    stepper.step(-100);
  }
  
  void slideSX(){
    analogWrite(3, 0);
    delay(100);
    analogWrite(3, 255);
    digitalWrite(pinDir, HIGH);
    delay(1000);
    analogWrite(3, 0);
  }
  
  void slideDX(){
    analogWrite(3, 0);
    delay(100);
    analogWrite(3, 255);
    digitalWrite(pinDir, LOW);
    delay(1000);
    analogWrite(3, 0);
  }
